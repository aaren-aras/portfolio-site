<!-- Adapted from: https://codepen.io/terio/pen/YzerzYw -->
<!-- CHANGE PLAYER COLOR -->
<div id="player">
  <script>
		/* Implementation of the presentation of the audio player */
		import lottieWeb from 'https://cdn.skypack.dev/lottie-web';

		const player = document.querySelector('#player')
		const playIconContainer = document.getElementById('play-icon');
		const audioPlayerContainer = document.getElementById('audio-player-container');
		const seekSlider = document.getElementById('seek-slider');
		const volumeSlider = document.getElementById('volume-slider');
		const muteIconContainer = document.getElementById('mute-icon');
		let playState = 'play';
		let muteState = 'unmute';

		const playAnimation = lottieWeb.loadAnimation({
		container: playIconContainer,
		path: 'https://assets7.lottiefiles.com/packages/lf20_vbkmvxki.json',
		renderer: 'svg',
		loop: false,
		autoplay: false,
		name: "Play Animation",
		});

		const muteAnimation = lottieWeb.loadAnimation({
				container: muteIconContainer,
				path: 'https://maxst.icons8.com/vue-static/landings/animated-icons/icons/mute/mute.json',
				renderer: 'svg',
				loop: false,
				autoplay: false,
				name: "Mute Animation",
		});

		playAnimation.goToAndStop(10, true);

		playIconContainer.addEventListener('click', () => {
				if(playState === 'play') {
						audio.play();
						playAnimation.playSegments([40, 42], true);
						requestAnimationFrame(whilePlaying);
						playState = 'pause';
				} else {
						audio.pause();
						playAnimation.playSegments([10, 12], true);
						cancelAnimationFrame(raf);
						playState = 'play';
				}
		});

		muteIconContainer.addEventListener('click', () => {
				if(muteState === 'unmute') {
						muteAnimation.playSegments([0, 15], true);
						audio.muted = true;
						muteState = 'mute';
				} else {
						muteAnimation.playSegments([15, 25], true);
						audio.muted = false;
						muteState = 'unmute';
				}
		});

		const showRangeProgress = (rangeInput) => {
				if(rangeInput === seekSlider) player.style.setProperty('--seek-before-width', rangeInput.value / rangeInput.max * 100 + '%');
				else player.style.setProperty('--volume-before-width', rangeInput.value / rangeInput.max * 100 + '%');
		}

		seekSlider.addEventListener('input', (e) => {
				showRangeProgress(e.target);
		});

		volumeSlider.addEventListener('input', (e) => {
				showRangeProgress(e.target);
		});

		/* Implementation of the functionality of the audio player */
		const audio = document.querySelector('audio');
		const durationContainer = document.getElementById('duration');
		const currentTimeContainer = document.getElementById('current-time');
		const outputContainer = document.getElementById('volume-output');
		let raf = null;

		const calculateTime = (secs) => {
				const minutes = Math.floor(secs / 60);
				const seconds = Math.floor(secs % 60);
				const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;
				return `${minutes}:${returnedSeconds}`;
		}

		const displayDuration = () => {
				durationContainer.textContent = calculateTime(audio.duration);
		}

		const setSliderMax = () => {
				seekSlider.max = Math.floor(audio.duration);
		}

		const displayBufferedAmount = () => {
				const bufferedAmount = Math.floor(audio.buffered.end(audio.buffered.length - 1));
				player.style.setProperty('--buffered-width', `${(bufferedAmount / seekSlider.max) * 100}%`);
		}

		const whilePlaying = () => {
				seekSlider.value = Math.floor(audio.currentTime);
				currentTimeContainer.textContent = calculateTime(seekSlider.value);
				player.style.setProperty('--seek-before-width', `${seekSlider.value / seekSlider.max * 100}%`);
				raf = requestAnimationFrame(whilePlaying);
		}

		if (audio.readyState > 0) {
				displayDuration();
				setSliderMax();
				displayBufferedAmount();
		} else {
				audio.addEventListener('loadedmetadata', () => {
						displayDuration();
						setSliderMax();
						displayBufferedAmount();
				});
		}

		audio.addEventListener('progress', displayBufferedAmount);

		seekSlider.addEventListener('input', () => {
				currentTimeContainer.textContent = calculateTime(seekSlider.value);
				if(!audio.paused) {
						cancelAnimationFrame(raf);
				}
		});

		seekSlider.addEventListener('change', () => {
				audio.currentTime = seekSlider.value;
				if(!audio.paused) {
						requestAnimationFrame(whilePlaying);
				}
		});

		volumeSlider.addEventListener('input', (e) => {
				const value = e.target.value;

				outputContainer.textContent = value;
				audio.volume = value / 100;
		});

		/* Implementation of the Media Session API */
		if('mediaSession' in navigator) {
				navigator.mediaSession.metadata = new MediaMetadata({
						title: 'Komorebi',
						artist: 'Anitek',
						album: 'MainStay',
						artwork: [
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '96x96', type: 'image/png' },
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '128x128', type: 'image/png' },
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '192x192', type: 'image/png' },
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '256x256', type: 'image/png' },
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '384x384', type: 'image/png' },
								{ src: 'https://assets.codepen.io/4358584/1.300.jpg', sizes: '512x512', type: 'image/png' }
						]
				});
				navigator.mediaSession.setActionHandler('play', () => {
						if(playState === 'play') {
								audio.play();
								playAnimation.playSegments([14, 27], true);
								requestAnimationFrame(whilePlaying);
								playState = 'pause';
						} else {
								audio.pause();
								playAnimation.playSegments([0, 14], true);
								cancelAnimationFrame(raf);
								playState = 'play';
						}
				});
				navigator.mediaSession.setActionHandler('pause', () => {
						if(playState === 'play') {
								audio.play();
								playAnimation.playSegments([14, 27], true);
								requestAnimationFrame(whilePlaying);
								playState = 'pause';
						} else {
								audio.pause();
								playAnimation.playSegments([0, 14], true);
								cancelAnimationFrame(raf);
								playState = 'play';
						}
				});
				navigator.mediaSession.setActionHandler('seekbackward', (details) => {
						audio.currentTime = audio.currentTime - (details.seekOffset || 10);
				});
				navigator.mediaSession.setActionHandler('seekforward', (details) => {
						audio.currentTime = audio.currentTime + (details.seekOffset || 10);
				});
				navigator.mediaSession.setActionHandler('seekto', (details) => {
						if (details.fastSeek && 'fastSeek' in audio) {
						audio.fastSeek(details.seekTime);
						return;
						}
						audio.currentTime = details.seekTime;
				});
				navigator.mediaSession.setActionHandler('stop', () => {
						audio.currentTime = 0;
						seekSlider.value = 0;
						audioPlayerContainer.style.setProperty('--seek-before-width', '0%');
						currentTimeContainer.textContent = '0:00';
						if(playState === 'pause') {
								playAnimation.playSegments([0, 14], true);
								cancelAnimationFrame(raf);
								playState = 'play';
						}
				});
			}
    </script>

    <!-- <div id="color-switch"><img src="https://i.imgur.com/SYyiJUa.png"> -->
  
      <div id="volume-slider-container">
        <output id="volume-output">100</output>
        <div id="volume-slider-squish">
          <input type="range" id="volume-slider" max="100" value="70">
        </div>
        <button id="mute-icon"></button>
      </div>
  
      <div id="audio-player-container">
        <audio src="audio/cherry-blossom.mp3" preload="metadata" loop></audio>
  
        <button id="play-icon"></button>
        <span id="current-time" class="time">0:00</span>
        <input type="range" id="seek-slider" max="100" value="0">
        <span id="duration" class="time">0:00</span>
      </div>
    </div>
</div>

<style lang="scss">
	// @import '../global.scss';
	
	// #color-switch {
	//     width: 100%;
	//     max-width: 608px;
	//     height: 100%;
	//     max-height: 38px;
	//     position: relative;
	// }
	// #color-switch img {
	//   position: absolute;
	//   object-fit: cover;
	//   width: 100%;
	//   height: 100%;
	//   z-index: 99;
	//   mix-blend-mode: lighten;
	//   pointer-events: none;
	// }
button {
  width: 25px;
  height: 25px;
  padding: 0;
  border: 0;
	margin-top: 4px;
	outline: none;
  cursor: pointer;
}
/* WRAPS */
#player {
  --seek-before-width: 0%;
  --volume-before-width: 100%;
  --buffered-width: 0%;
  max-height: 80px;
  height: 100%;
  max-width: 608px;
  width: 100%;
  z-index: 999;
  position: absolute;
  inset: auto auto 0 0;


  user-select: none;
}
#audio-player-container {
  position: relative;
  max-width: 600px;
  height: 32px;
  border: 4px solid white;
  z-index: 1;
  /* background color */
  background-color: #000;
}
#volume-slider-container {
  position: absolute;
  display: flex;
  top: -30px;
  max-width: 608px;
  width: 100%;
  height: 20px;
  content-align: center;
  justify-content: space-between;
  align-items: center;
  gap: 5px;
  opacity: 0;
    -webkit-transition: all 500ms ease-in-out;
    -moz-transition: all 500ms ease-in-out;
    -ms-transition: all 500ms ease-in-out;
    -o-transition: all 500ms ease-in-out;
    transition: all 500ms ease-in-out;
}
#player:hover #volume-slider-container {
    opacity: 1;
}

#volume-slider {
  opacity: 0;
  
  position: relative;
  z-index: 10;
  transform: scaleY(5.5);
}

#volume-slider-squish {
  position: relative;
}

#volume-slider-squish::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;

  display: block;
  width: var(--volume-before-width, 0);
  height: 100%;

  background-color: #fff;
}


#audio-player-container::before {
    position: absolute;
    content: '';
}
#play-icon {
  position: absolute;
  left: 0; 
  right: 0; 
  margin-left: auto; 
  margin-right: auto; 
  width: 25px;
  height: 25px;
  transform: scale(1.2);
  z-index: 1;
  filter: invert(1);
  mix-blend-mode: difference;
  background: transparent;
}
path {
  stroke: #fff;
  fill: #fff;
  mix-blend-mode: difference;
  object-fit: cover;
}
.time {
    width: 32px;
    text-align: center;
    line-height: 32px;  
    color: #fff;
  mix-blend-mode: difference;
  font-weight: 700;
  letter-spacing: -1px;
  font-size: 14px;
  font-family: 'Inter', sans-serif;
}
#current-time {
  position: absolute;
  left: 10px;
  z-index: 1;
}
#duration {
  position: absolute;
  right: 10px;
  z-index: 1;
}
input[type="range"] {
    position: relative;
    -webkit-appearance: none;
    width: 100%;
    margin: 0;
    padding: 0;
    height: 32px;
    float: left;
  border-radius: 0;
  z-index: 0;
  cursor: default;
}
input[type="range"]::-webkit-slider-runnable-track {
    width: 100%;
    height: 32px;
    cursor: default;
    /* COLOR AFTER */
    background-color: #000;
}
input[type="range"]::before {
    position: absolute;
    content: "";
    left: 0;
    width: var(--seek-before-width);
    height: 32px;
    /* COLOR BEFORE */
    background-color: #fff;
    cursor: default;
}
input[type="range"]::-webkit-slider-thumb {
  opacity: 0;
  cursor: default;
}
input[type="range"]:hover::-webkit-slider-thumb {
  opacity: 0;
  cursor: default;
}
input[type="range"]:active::-webkit-slider-thumb {
  opacity: 0;
  cursor: default;
}
input[type="range"]::-moz-range-track {
    width: 100%;
    height: 32px;
    cursor: default;
    background-color: black;
}
input[type="range"]::-moz-range-progress {
    background-color: white;
  height: 32px;
}
input[type="range"]::-moz-focus-outer {
    border: 0;
  cursor: default;
}
input[type="range"]::-moz-range-thumb {
    opacity: 0;
  cursor: default;
}
input[type="range"]:active::-moz-range-thumb {
    opacity: 0;
  cursor: default;
}
input[type="range"]::-ms-track {
    width: 100%;
    height: 32px;
    cursor: default;
    background: transparent;
}
input[type="range"]::-ms-fill-lower {
    background-color: transparent;
  cursor: default;
}
input[type="range"]::-ms-fill-upper {
  background: transparent;
  cursor: default;
}
input[type="range"]::-ms-thumb {
  opacity: 0;
  cursor: default;
}
input[type="range"]:active::-ms-thumb {
  opacity: 0;
  cursor: default;
}



output {
    width: 18px;
  height: 40px;
  line-height: 40px;
    text-align: center;
    font-size: 12px;
    float: left;
    clear: left;
    color: #fff;
  float: left;
}
#volume-slider {
  float: left;
}
#volume-slider-squish {
  width: 100%;
  height: 4px;
  float: left;
/*   background-color: blue; */
  background-color: #000;
}
#volume-slider::-webkit-slider-runnable-track {
    background: rgba(0, 0, 0, 1);
  float: left;
  height: 4px;
}
#volume-slider::-moz-range-track {
  background: rgba(0, 0, 0, 1);
  float: left;
  height: 4px;
}
#volume-slider::-ms-fill-upper {
  background: rgba(0, 0, 0, 1);
  float: left;
  height: 4px;
}
#volume-slider::before {
  width: var(--volume-before-width);
  float: left;
  height: 4px;
}
#volume-slider-squish > input[type="range"] {
  height: 4px;
}
#volume-slider-squish > input[type="range"] {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-webkit-slider-runnable-track {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::before {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-webkit-slider-thumb {
  height: 4px;
  width: 4px;
  background-color: #fff;
  transform: scale(1);
  opacity: 1;
}
#volume-slider-squish > input[type="range"]:hover::-webkit-slider-thumb {
  height: 4px;
  width: 4px;
    transform: scale(1);
  opacity: 1;
}
#volume-slider-squish > input[type="range"]:active::-webkit-slider-thumb {
  height: 4px;
  width: 4px;
    transform: scale(1);
  opacity: 1;
}
#volume-slider-squish > input[type="range"]::-moz-range-track {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-moz-range-progress {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-moz-focus-outer {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-moz-range-thumb {
    height: 4px;
}
#volume-slider-squish > input[type="range"]:active::-moz-range-thumb {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-ms-track {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-ms-fill-lower {
    height: 4px;
}
#volume-slider-squish > input[type="range"]::-ms-fill-upper {
  height: 4px;
}
#volume-slider-squish > input[type="range"]::-ms-thumb {
  height: 4px;
}
#volume-slider-squish > input[type="range"]:active::-ms-thumb {
  height: 4px;
}
#mute-icon {
  float: left;
  width: 18px;
  height: 18px;
  margin-top: -1px;
  background: transparent;
}   
</style>