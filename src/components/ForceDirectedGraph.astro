<div>
  <svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"></svg>
  <script is:inline src="https://d3js.org/d3.v4.js"></script>
  <script>
    // Adapted from https://codesandbox.io/p/sandbox/d3js-draggable-force-directed-graph-py3rf?file=%2Fapp.js%3A63%2C50

    // TO DO: add hover/click/drag/effects to nodes

    type NodeType = {
      color: string;
      size: number;
      x?: number, 
      y?: number;
      fx?: number | null;
      fy?: number | null;
    }

    type LinkType = {
      source: NodeType;
      target: NodeType;
    };

    // Defining nodes
    const nodeData: NodeType[] = [
      { color: "#FFFFFF", size: 5 },
      { color: "rgb(255, 255, 255)", size: 5 },
      { color: "white", size: 10 },
      { color: "white", size: 10 },
      { color: "white", size: 15 },
      { color: "white", size: 15 }
    ];

    // Positioning nodes at centre 
    const nodes: NodeType[] = nodeData.map(node => ({
      ...node,
      x: window.innerWidth/2,
      y: window.innerHeight/2
    }));

    // Defining connections 
    const links: LinkType[] = [
      { source: nodes[0], target: nodes[1] },
      { source: nodes[1], target: nodes[2] },
      { source: nodes[2], target: nodes[3] },
      { source: nodes[3], target: nodes[4] },
      { source: nodes[4], target: nodes[5] },
      { source: nodes[5], target: nodes[0] },
      { source: nodes[3], target: nodes[0] }
    ];

    const svg = d3.select("svg");

    const linkSelection = svg
      .selectAll("line")
      .data(links)
      .enter()
      .append("line")
      .attr("stroke", "white")
      .attr("stroke-width", 0.5);

    const nodeSelection = svg
      .selectAll("circle")  
      .data(nodes)
      .enter()
      .append("circle")
      .attr("r", (d: NodeType) => d.size)
      .attr("fill", (d: NodeType) => d.color)
      .call(
        d3
          .drag<SVGCircleElement, NodeType>() 
          .on("start", dragStart)
          .on("drag", drag) 
          .on("end", dragEnd)
      );

    const simulation = d3
      .forceSimulation<NodeType>(nodes)
      // .force("center", d3.forceCenter(150, 150))
      .force("nodes", d3.forceManyBody())
      .force(
        "links",
        d3
          .forceLink(links)
          // .id((d: NodeType) => d.color) <-- Needed for dynamic props
          .distance((d: LinkType) => 5 * (d.source.size + d.target.size))
      )
      .on("tick", ticked);

    function ticked() {
      // console.log(simulation.alpha());
      nodeSelection
        .attr("cx", (d: NodeType) => d.x!)
        .attr("cy", (d: NodeType) => d.y!);

      linkSelection
        // Props are definitely defined 
        .attr("x1", (d: LinkType) => d.source.x!)
        .attr("y1", (d: LinkType) => d.source.y!)
        .attr("x2", (d: LinkType) => d.target.x!)
        .attr("y2", (d: LinkType) => d.target.y!);
    }

    function dragStart(d: NodeType) {
      // console.log('drag start');
      simulation.alphaTarget(0.5).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function drag(d: NodeType) {
      // console.log('dragging');
      // simulation.alpha(0.5).restart()

      // Bypass type checking (TS doesn't recognize `d3.event`)
      d.fx = (window as any).event.x;
      d.fy = (window as any).event.y;
    }

    function dragEnd(d: NodeType) {
      // console.log('drag end');
      simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  </script>
</div>

<style lang="scss">
    @import '../global.scss';

    svg { 
      position: absolute;
      inset: 0;
    }
</style>