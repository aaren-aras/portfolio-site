---
import Card from '../components/Card.astro';

interface Props {
	title: string;
}

const { title } = Astro.props;

---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Portfolio website!" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg"></svg>
		<script defer src="https://d3js.org/d3.v4.js"></script>
		<script>
			document.addEventListener('DOMContentLoaded', function() {

			var width = 3000;
    	var height = 2000;

			var nodes = [
      { color: "red", size: 5 },
      { color: "orange", size: 10 },
      { color: "yellow", size: 15 },
      { color: "green", size: 20 },
      { color: "blue", size: 25 },
      { color: "purple", size: 30 }
    ];

		var links = [
      { source: "red", target: "orange" },
      { source: "orange", target: "yellow" },
      { source: "yellow", target: "green" },
      { source: "green", target: "blue" },
      { source: "blue", target: "purple" },
      { source: "purple", target: "red" },
      { source: "green", target: "red" }
    ];

		var svg = d3
      .select("svg")
      .attr("width", width)
      .attr("height", height);

			var linkSelection = svg
      .selectAll("line")
      .data(links)
      .enter()
      .append("line")
      .attr("stroke", "black")
      .attr("stroke-width", 1);

    var nodeSelection = svg
      .selectAll("circle")
      .data(nodes)
      .enter()
      .append("circle")
      .attr("r", d => d.size)
      .attr("fill", d => d.color)
      .call(
        d3
          .drag()
          .on("start", dragStart)
          .on("drag", drag)
          .on("end", dragEnd)
      );

    var simulation = d3.forceSimulation(nodes);

    simulation
      .force("center", d3.forceCenter(width / 2, height / 2))
      .force("nodes", d3.forceManyBody())
      .force(
        "links",
        d3
          .forceLink(links)
          .id(d => d.color)
          .distance(d => 5 * (d.source.size + d.target.size))
      )
      .on("tick", ticked);

    function ticked() {
      // console.log(simulation.alpha());

      nodeSelection.attr("cx", d => d.x).attr("cy", d => d.y);

      linkSelection
        .attr("x1", d => d.source.x)
        .attr("y1", d => d.source.y)
        .attr("x2", d => d.target.x)
        .attr("y2", d => d.target.y);
    }

    function dragStart(d) {
      // console.log('drag start');
      simulation.alphaTarget(0.5).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function drag(d) {
      // console.log('dragging');
      // simulation.alpha(0.5).restart()
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragEnd(d) {
      // console.log('drag end');
      simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
		});
		</script>
		<slot />
	</body>
	<nav>
		<ul role="list" class="link-card-grid">
			<Card
				href="/"
				title="Home"
				body="Home sweet home"
			/>
			<Card
				href="/about-me"
				title="About Me"
				body="Learn about my life story and how I became the greatest web developer ever."
			/>
			<Card
				href="/projects"
				title="Projects"
				body="Check out my really cool awesome spectacular projects that I've totally made by myself."
			/>
			<Card
				href="/test-2.html"
				title="Contacts"
				body="Pls contact me, I'm so lonely and dead inside. :("
			/>
		</ul>
	</nav>
</html>

<style is:global lang="scss">
	@import '../sass/global.scss';

	svg {
      margin: 0 auto;
      display: block;
    }
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
		background-size: 224px;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

	.link-card-grid {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			gap: 2rem;

			// background: $primary-color;
			padding: 0;
			margin: 0;
		}
</style>
